name: node-hub

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        if: runner.os == 'Linux'
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Set up Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          pip install black pylint pytest

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run Linting and Tests
        run: |
          chmod +x .github/workflows/node_hub_test.sh
          .github/workflows/node_hub_test.sh

  publish:
    needs: [ci]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        if: runner.os == 'Linux'
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Set up Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Publish Projects
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_PASS }}
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_PASS }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # List of ignored modules 
          ignored_folders=("dora-parler")

          for dir in node-hub/*/ ; do

            # Get the base name of the directory (without the path)
            base_dir=$(basename "$dir")
            
            if [[ " ${ignored_folders[@]} " =~ " ${base_dir} " ]]; then
                echo "Skipping $base_dir as there is a hf model fetching issue..."
                continue
            fi
            
            if [ -d "$dir" ]; then
              if [[ -f "$dir/Cargo.toml" && -f "$dir/pyproject.toml" ]]; then
                echo "Publishing $dir using maturin..."
                (cd "$dir" && maturin publish --skip-existing)
              else
                if [ -f "$dir/pyproject.toml" ]; then
                  echo "Publishing $dir using Poetry..."
                  (cd "$dir" && poetry publish --build --skip-existing)
                fi
              fi
              
              if [ -f "$dir/Cargo.toml" ]; then
                echo "Publishing $dir using Cargo..."
                (cd "$dir" && cargo publish )
              fi
            fi
          done
